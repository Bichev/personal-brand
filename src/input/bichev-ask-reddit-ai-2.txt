Directory structure:
└── bichev-ask-reddit-ai/
    ├── README.md
    ├── eslint.config.mjs
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── tsconfig.json
    ├── public/
    │   └── site.webmanifest
    ├── scripts/
    │   └── generate-favicon.js
    └── src/
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── page.tsx
        │   └── api/
        │       ├── ask-question/
        │       │   └── route.ts
        │       └── reddit-data/
        │           └── route.ts
        ├── components/
        │   ├── AnswerDisplay.tsx
        │   ├── Disclaimer.tsx
        │   ├── Footer.tsx
        │   ├── LoadingSpinner.tsx
        │   ├── QuestionInput.tsx
        │   ├── SubredditSelector.tsx
        │   └── TrendingQuestions.tsx
        ├── lib/
        │   ├── constants.ts
        │   └── utils.ts
        └── types/
            └── index.ts

================================================
FILE: README.md
================================================
# 🤖 Ask Reddit AI

> Get AI-powered answers from Reddit discussions using OpenAI GPT-4o-mini and the Reddit API

[![Next.js](https://img.shields.io/badge/Next.js-15.3.3-black)](https://nextjs.org/)
[![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-blue)](https://www.typescriptlang.org/)
[![Tailwind CSS](https://img.shields.io/badge/Tailwind%20CSS-4.0+-38B2AC)](https://tailwindcss.com/)
[![OpenAI](https://img.shields.io/badge/OpenAI-GPT--4o--mini-412991)](https://openai.com/)

A beautiful, responsive web application that lets users ask questions about any subreddit and receive AI-powered answers based on recent Reddit discussions. Features intelligent rate limiting and professional disclaimers for production use.

## ✨ Features

### 🎯 Core Features
- **Smart Subreddit Selection**: Choose from popular subreddits or enter any custom subreddit
- **AI-Powered Analysis**: Get comprehensive answers using OpenAI's GPT-4o-mini model
- **Real-time Reddit Data**: Fetches the latest posts and comments from the past 24-48 hours
- **Beautiful UI**: Modern, responsive design with dark mode support
- **Trending Questions**: Discover popular questions with a curated selection
- **Answer Sharing**: Copy answers to clipboard or share on Twitter
- **Local Storage**: Save your favorite answers for later reference

### 🚀 Advanced Features
- **Rate Limiting**: 3 requests per 24 hours in production to manage OpenAI costs
- **Development Mode**: Unlimited requests for localhost development
- **Professional Disclaimers**: Clear informational/entertainment purpose notices
- **Contact Integration**: LinkedIn and GitHub links for user inquiries
- **Responsive Design**: Works perfectly on desktop, tablet, and mobile
- **Error Handling**: Graceful error handling with user-friendly messages
- **OAuth2 Integration**: Direct Reddit API authentication without refresh tokens

### 🛡️ Production Features
- **Cost Management**: Built-in rate limiting to control OpenAI API costs
- **User Communication**: Clear contact information and upgrade paths
- **Professional Footer**: Attribution and contact links
- **Development Detection**: Automatic unlimited access for localhost

## 🛠 Tech Stack

- **Framework**: Next.js 15.3.3 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS 4.0
- **UI Components**: Heroicons, React Hot Toast
- **APIs**: OpenAI GPT-4o-mini, Reddit API (OAuth2 Client Credentials)
- **State Management**: React hooks with localStorage persistence
- **Authentication**: Reddit OAuth2 client credentials flow

## 📋 Prerequisites

Before you begin, ensure you have the following:

1. **Node.js** (v18.0.0 or higher)
2. **npm** or **yarn** package manager
3. **Reddit API credentials** (Client ID and Secret)
4. **OpenAI API key**

## 🚀 Quick Start

### 1. Clone the Repository

```bash
git clone https://github.com/yourusername/ask-reddit-ai.git
cd ask-reddit-ai
```

### 2. Install Dependencies

```bash
npm install
# or
yarn install
```

### 3. Set up Environment Variables

Create a `.env.local` file in the root directory:

```env
# Reddit API Configuration (OAuth2 Client Credentials)
REDDIT_CLIENT_ID=your_reddit_client_id_here
REDDIT_CLIENT_SECRET=your_reddit_client_secret_here

# OpenAI API Configuration
OPENAI_API_KEY=your_openai_api_key_here
```

### 4. Get Reddit API Credentials

1. Go to [Reddit Apps](https://www.reddit.com/prefs/apps)
2. Click "Create App" or "Create Another App"
3. Choose **"web app"** as the app type (not script)
4. Set redirect URI to `http://localhost:3000` (required but not used)
5. Copy your `client_id` and `client_secret`

**Note**: We use OAuth2 client credentials flow, so no refresh token is needed!

### 5. Get OpenAI API Key

1. Visit [OpenAI Platform](https://platform.openai.com/api-keys)
2. Create a new API key
3. Copy the key to your `.env.local` file

### 6. Run the Development Server

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) in your browser.

## 🔑 Reddit API Setup (Simplified)

### Step 1: Create a Reddit App

1. Log in to Reddit and go to https://www.reddit.com/prefs/apps
2. Scroll down and click "Create App" or "Create Another App"
3. Fill in the details:
   - **Name**: Ask Reddit AI (or any name you prefer)
   - **App type**: Select **"web app"** (important!)
   - **Description**: AI-powered Reddit discussion analyzer
   - **About URL**: Leave blank or add your project URL
   - **Redirect URI**: `http://localhost:3000` (required field)
4. Click "Create app"

### Step 2: Get Client Credentials

After creating the app, you'll see:
- **Client ID**: The string under your app name (looks like `abcdef123456`)
- **Client Secret**: The "secret" field

That's it! No token generation needed - we use OAuth2 client credentials flow.

## 📁 Project Structure

```
ask-reddit-ai/
├── src/
│   ├── app/                    # Next.js App Router
│   │   ├── api/               # API routes
│   │   │   ├── ask-question/  # OpenAI integration
│   │   │   └── reddit-data/   # Reddit OAuth2 integration
│   │   ├── globals.css        # Global styles
│   │   ├── layout.tsx         # Root layout
│   │   └── page.tsx           # Main page
│   ├── components/            # React components
│   │   ├── AnswerDisplay.tsx  # AI answer display
│   │   ├── Disclaimer.tsx     # Rate limit & disclaimer
│   │   ├── Footer.tsx         # Professional footer
│   │   ├── LoadingSpinner.tsx # Loading animations
│   │   ├── QuestionInput.tsx  # Question input form
│   │   ├── SubredditSelector.tsx # Subreddit selection
│   │   └── TrendingQuestions.tsx # Trending questions
│   ├── lib/                   # Utility functions
│   │   ├── constants.ts       # App constants
│   │   └── utils.ts           # Helper functions & rate limiting
│   └── types/                 # TypeScript types
│       └── index.ts           # Type definitions
├── public/                    # Static assets
├── .env.local                 # Environment variables
├── package.json               # Dependencies
├── tailwind.config.js         # Tailwind configuration
└── tsconfig.json             # TypeScript configuration
```

## 🎨 Component Architecture

### Core Components

- **`SubredditSelector`**: Dropdown with popular subreddits and custom input
- **`QuestionInput`**: Smart textarea with validation and submission
- **`AnswerDisplay`**: Rich answer formatting with metadata
- **`TrendingQuestions`**: Curated question suggestions
- **`LoadingSpinner`**: Animated loading states
- **`Disclaimer`**: Rate limiting status and disclaimers
- **`Footer`**: Professional contact information and attribution

### API Routes

- **`/api/reddit-data`**: OAuth2 Reddit API integration
- **`/api/ask-question`**: OpenAI GPT-4o-mini processing

## 🔧 Configuration

### Environment Variables

| Variable | Description | Required |
|----------|-------------|----------|
| `REDDIT_CLIENT_ID` | Reddit app client ID | ✅ |
| `REDDIT_CLIENT_SECRET` | Reddit app secret | ✅ |
| `OPENAI_API_KEY` | OpenAI API key | ✅ |

### Rate Limiting Configuration

Edit `src/lib/constants.ts` to customize:

```typescript
export const CONFIG = {
  RATE_LIMIT: {
    MAX_REQUESTS: 3,        // Requests per day
    RESET_HOURS: 24,        // Reset period
  },
  // ... other settings
};
```

### Reddit Data Limits

- **Posts**: 25 default, 100 maximum
- **Comments**: 10 per post from top 5 posts (max 50 total)
- **Sorting**: By score (highest first)
- **Timeframe**: 24h, 48h, or week

## 🚀 Deployment

### Vercel (Recommended)

1. Push your code to GitHub
2. Connect your repository to [Vercel](https://vercel.com)
3. Add environment variables in Vercel dashboard:
   ```
   REDDIT_CLIENT_ID=your_client_id
   REDDIT_CLIENT_SECRET=your_client_secret
   OPENAI_API_KEY=your_openai_key
   ```
4. Deploy automatically on every push

### Production Features

- **Automatic Rate Limiting**: 3 requests per 24 hours
- **Professional Disclaimers**: Clear informational purpose notices
- **Contact Information**: LinkedIn and GitHub integration
- **Development Detection**: Unlimited requests on localhost

## 🛡️ Rate Limiting & Cost Management

### Development Mode (localhost)
- ✅ Unlimited requests
- 🟢 Green "Development Mode" disclaimer
- 🔧 Full access for testing

### Production Mode (deployed)
- 📊 3 requests per 24 hours per user
- 🔵 Blue disclaimer with contact information
- 💰 Cost-controlled OpenAI usage
- 📞 Clear upgrade/contact paths

### Contact Information
- **LinkedIn**: [Vladimir Bichev](https://www.linkedin.com/in/vladimir-bichev-383b1525/)
- **GitHub**: [ask-reddit-ai](https://github.com/Bichev/ask-reddit-ai)
- **Email**: baker@sobrd.com

## 🧪 Development

### Running in Development

```bash
npm run dev
```

- Unlimited requests on localhost
- Full debugging capabilities
- Hot reload enabled

### Linting

```bash
npm run lint
```

### Type Checking

```bash
npm run type-check
```

### Building for Production

```bash
npm run build
npm run start
```

## 🔍 Troubleshooting

### Common Issues

**Reddit API Not Working**
- Verify your credentials in `.env.local`
- Check if your Reddit app is set to "web app" type
- Ensure client ID and secret are correct

**OpenAI API Errors** 
- Confirm your API key is active
- Check your OpenAI usage limits
- GPT-4o-mini should be available for all accounts

**Rate Limiting Issues**
- Check browser localStorage for rate limit data
- Clear localStorage to reset in development
- Contact developer for production limit increases

**Build Errors**
- Clear `.next` folder: `rm -rf .next`
- Reinstall dependencies: `rm -rf node_modules && npm install`
- Check TypeScript errors: `npm run type-check`

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Guidelines

- Follow TypeScript best practices
- Use Tailwind CSS for styling
- Add proper error handling
- Test rate limiting functionality
- Update documentation for new features

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [OpenAI](https://openai.com/) for the GPT-4o-mini model
- [Reddit](https://www.reddit.com/) for the comprehensive API
- [Next.js](https://nextjs.org/) team for the fantastic framework
- [Tailwind CSS](https://tailwindcss.com/) for the utility-first CSS framework
- [Heroicons](https://heroicons.com/) for the beautiful icons

## 📧 Support & Contact

For questions, feature requests, or collaboration:

- **LinkedIn**: [Vladimir Bichev](https://www.linkedin.com/in/vladimir-bichev-383b1525/)
- **GitHub**: [ask-reddit-ai](https://github.com/Bichev/ask-reddit-ai)
- **Email**: baker@sobrd.com

For technical issues:
1. Check the [troubleshooting section](#-troubleshooting)
2. Search existing [GitHub issues](https://github.com/yourusername/ask-reddit-ai/issues)
3. Create a new issue with detailed information

---

<div align="center">
  <p>Made with ❤️ and AI • For informational and entertainment purposes</p>
  <p>
    <a href="#-ask-reddit-ai">Back to top</a>
  </p>
</div>



================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "ask-reddit-ai",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "clsx": "^2.1.1",
    "framer-motion": "^12.18.1",
    "lucide-react": "^0.515.0",
    "next": "15.3.3",
    "openai": "^5.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hot-toast": "^2.5.2",
    "snoowrap": "^1.23.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "sharp": "^0.34.2",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}



================================================
FILE: postcss.config.mjs
================================================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: public/site.webmanifest
================================================
{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}


================================================
FILE: scripts/generate-favicon.js
================================================
#!/usr/bin/env node

/**
 * Favicon Generator Script for Ask Reddit AI
 * 
 * This script generates various favicon formats from the SVG source
 * Run with: node scripts/generate-favicon.js
 */

const fs = require('fs');
const path = require('path');

// Check if sharp is available (optional dependency)
let sharp;
try {
  sharp = require('sharp');
} catch (error) {
  console.log('Sharp not found. Install with: npm install sharp --save-dev');
  console.log('For now, you can use online converters to generate favicons.');
  process.exit(1);
}

const svgPath = path.join(__dirname, '../public/favicon.svg');
const publicDir = path.join(__dirname, '../public');

async function generateFavicons() {
  try {
    console.log('🎨 Generating favicons for Ask Reddit AI...');

    // Read the SVG file
    const svgBuffer = fs.readFileSync(svgPath);

    // Generate different sizes
    const sizes = [
      { size: 16, name: 'favicon-16x16.png' },
      { size: 32, name: 'favicon-32x32.png' },
      { size: 48, name: 'favicon-48x48.png' },
      { size: 180, name: 'apple-touch-icon.png' },
      { size: 192, name: 'android-chrome-192x192.png' },
      { size: 512, name: 'android-chrome-512x512.png' },
    ];

    // Generate PNG files
    for (const { size, name } of sizes) {
      await sharp(svgBuffer)
        .resize(size, size)
        .png()
        .toFile(path.join(publicDir, name));
      
      console.log(`✅ Generated ${name} (${size}x${size})`);
    }

    // Generate ICO file (16x16 and 32x32)
    const ico16 = await sharp(svgBuffer).resize(16, 16).png().toBuffer();
    const ico32 = await sharp(svgBuffer).resize(32, 32).png().toBuffer();
    
    // For ICO generation, we'll create a simple 32x32 PNG and rename it
    // (Most modern browsers support PNG favicons)
    await sharp(svgBuffer)
      .resize(32, 32)
      .png()
      .toFile(path.join(publicDir, 'favicon.ico'));
    
    console.log('✅ Generated favicon.ico (32x32)');

    // Generate web app manifest
    const manifest = {
      name: "Ask Reddit AI",
      short_name: "Ask Reddit AI",
      description: "AI-powered answers from Reddit discussions",
      start_url: "/",
      display: "standalone",
      background_color: "#ffffff",
      theme_color: "#4F46E5",
      icons: [
        {
          src: "/android-chrome-192x192.png",
          sizes: "192x192",
          type: "image/png"
        },
        {
          src: "/android-chrome-512x512.png",
          sizes: "512x512",
          type: "image/png"
        }
      ]
    };

    fs.writeFileSync(
      path.join(publicDir, 'site.webmanifest'),
      JSON.stringify(manifest, null, 2)
    );

    console.log('✅ Generated site.webmanifest');
    console.log('🎉 All favicons generated successfully!');
    console.log('\n📝 Next steps:');
    console.log('1. Add favicon links to your layout.tsx');
    console.log('2. Test the favicons in different browsers');
    console.log('3. Deploy to see them in action!');

  } catch (error) {
    console.error('❌ Error generating favicons:', error);
    process.exit(1);
  }
}

// Run the generator
generateFavicons(); 


================================================
FILE: src/app/globals.css
================================================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

/* Custom animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-10px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-out;
}

.animate-slide-in {
  animation: slideIn 0.3s ease-out;
}

/* Gradient text */
.gradient-text {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Glass morphism */
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

/* Loading animation */
.loading-dots {
  display: inline-block;
}

.loading-dots:after {
  content: '';
  animation: loading-dots 1.5s infinite;
}

@keyframes loading-dots {
  0%, 20% {
    content: '';
  }
  40% {
    content: '.';
  }
  60% {
    content: '..';
  }
  80%, 100% {
    content: '...';
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}



================================================
FILE: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Toaster } from 'react-hot-toast';

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
});

export const metadata: Metadata = {
  title: "Ask Reddit AI - Get AI-powered answers from Reddit discussions",
  description: "Ask questions and get synthesized answers from the latest Reddit discussions using AI. Explore trending topics from any subreddit.",
  keywords: ["reddit", "ai", "questions", "subreddit", "discussions", "openai"],
  authors: [{ name: "Ask Reddit AI" }],
  openGraph: {
    title: "Ask Reddit AI",
    description: "Get AI-powered answers from Reddit discussions",
    type: "website",
  },
  icons: {
    icon: [
      { url: '/favicon.ico', sizes: '32x32', type: 'image/x-icon' },
      { url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
      { url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },
    ],
    apple: [
      { url: '/apple-touch-icon.png', sizes: '180x180', type: 'image/png' },
    ],
    other: [
      { url: '/android-chrome-192x192.png', sizes: '192x192', type: 'image/png' },
      { url: '/android-chrome-512x512.png', sizes: '512x512', type: 'image/png' },
    ],
  },
  manifest: '/site.webmanifest',
  themeColor: '#4F46E5',
  viewport: 'width=device-width, initial-scale=1',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="h-full">
      <head>
        {/* Additional favicon links for better browser support */}
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="mask-icon" href="/favicon.svg" color="#4F46E5" />
        <meta name="msapplication-TileColor" content="#4F46E5" />
        <meta name="theme-color" content="#4F46E5" />
      </head>
      <body className={`${inter.variable} h-full font-sans antialiased bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900`}>
        {children}
        <Toaster 
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#363636',
              color: '#fff',
            },
          }}
        />
      </body>
    </html>
  );
}



================================================
FILE: src/app/page.tsx
================================================
'use client';

import { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';
import { 
  SparklesIcon,
  ShareIcon,
  HeartIcon,
  ClipboardDocumentIcon,
} from '@heroicons/react/24/outline';

import { POPULAR_SUBREDDITS, TRENDING_QUESTIONS, CONFIG, API_ENDPOINTS } from '@/lib/constants';
import { 
  validateSubreddit, 
  validateQuestion, 
  debounce, 
  formatForSharing,
  createTwitterUrl,
  copyToClipboard,
  generateId,
  saveToLocalStorage,
  loadFromLocalStorage,
  checkRateLimit,
  incrementRateLimit,
} from '@/lib/utils';
import type { ShareableAnswer, AppState } from '@/types';

// Component imports (will create these next)
import SubredditSelector from '@/components/SubredditSelector';
import QuestionInput from '@/components/QuestionInput';
import TrendingQuestions from '@/components/TrendingQuestions';
import AnswerDisplay from '@/components/AnswerDisplay';
import LoadingSpinner from '@/components/LoadingSpinner';
import Disclaimer from '@/components/Disclaimer';
import Footer from '@/components/Footer';

export default function HomePage() {
  const [appState, setAppState] = useState<AppState>({
    selectedSubreddit: 'AskReddit',
    customSubreddit: '',
    question: '',
    isLoading: false,
    currentAnswer: null,
    savedAnswers: [],
    selectedModel: 'gpt-4o-mini',
  });

  const [rateLimit, setRateLimit] = useState<{
    allowed: boolean;
    remaining: number;
    resetTime: number;
  }>({
    allowed: true,
    remaining: CONFIG.RATE_LIMIT.MAX_REQUESTS,
    resetTime: Date.now(),
  });

  // Load saved answers and check rate limit on mount
  useEffect(() => {
    const savedAnswers = loadFromLocalStorage<ShareableAnswer[]>(CONFIG.STORAGE.SAVED_ANSWERS_KEY, []);
    const rateLimitStatus = checkRateLimit();
    
    setAppState(prev => ({ ...prev, savedAnswers }));
    setRateLimit(rateLimitStatus);
  }, []);

  // Save answers to localStorage when savedAnswers changes
  useEffect(() => {
    if (appState.savedAnswers.length > 0) {
      saveToLocalStorage(CONFIG.STORAGE.SAVED_ANSWERS_KEY, appState.savedAnswers);
    }
  }, [appState.savedAnswers]);

  // Debounced question validation
  const debouncedValidateQuestion = debounce((question: string) => {
    if (question && question.length > 0) {
      const validation = validateQuestion(question);
      if (!validation.isValid && validation.error) {
        // Only show error if user has been typing for a while
        setTimeout(() => {
          if (question === appState.question && !validation.isValid) {
            toast.error(validation.error!);
          }
        }, 1000);
      }
    }
  }, CONFIG.UI.DEBOUNCE_DELAY);

  // Handle question input change
  const handleQuestionChange = (question: string) => {
    setAppState(prev => ({ ...prev, question }));
    debouncedValidateQuestion(question);
  };

  // Handle subreddit selection
  const handleSubredditChange = (subreddit: string) => {
    setAppState(prev => ({ 
      ...prev, 
      selectedSubreddit: subreddit,
      customSubreddit: subreddit === 'custom' ? prev.customSubreddit : '',
    }));
  };

  // Handle custom subreddit input
  const handleCustomSubredditChange = (customSubreddit: string) => {
    setAppState(prev => ({ ...prev, customSubreddit }));
  };

  // Handle trending question selection
  const handleTrendingQuestionSelect = (trendingQuestion: string, subreddit: string) => {
    setAppState(prev => ({
      ...prev,
      question: trendingQuestion,
      selectedSubreddit: subreddit,
      customSubreddit: '',
    }));
  };

  // Submit question to get AI answer
  const handleSubmitQuestion = async () => {
    // Check rate limit first
    const rateLimitStatus = checkRateLimit();
    if (!rateLimitStatus.allowed) {
      setRateLimit(rateLimitStatus);
      toast.error(`Daily limit reached. Try again in ${Math.ceil((rateLimitStatus.resetTime - Date.now()) / (1000 * 60 * 60))} hours.`);
      return;
    }

    const currentSubreddit = appState.selectedSubreddit === 'custom' 
      ? appState.customSubreddit 
      : appState.selectedSubreddit;

    // Validate inputs
    const subredditValidation = validateSubreddit(currentSubreddit);
    if (!subredditValidation.isValid) {
      toast.error(subredditValidation.error!);
      return;
    }

    const questionValidation = validateQuestion(appState.question);
    if (!questionValidation.isValid) {
      toast.error(questionValidation.error!);
      return;
    }

    setAppState(prev => ({ ...prev, isLoading: true, currentAnswer: null }));

    try {
      const response = await fetch(API_ENDPOINTS.ASK_QUESTION, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          subreddit: currentSubreddit,
          question: appState.question,
          model: appState.selectedModel,
        }),
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to get answer');
      }

      // Increment rate limit counter on successful request
      incrementRateLimit();
      const newRateLimitStatus = checkRateLimit();
      setRateLimit(newRateLimitStatus);

      setAppState(prev => ({ ...prev, currentAnswer: data.data }));
      toast.success('Answer generated successfully!');
    } catch (error) {
      console.error('Error getting answer:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to get answer');
    } finally {
      setAppState(prev => ({ ...prev, isLoading: false }));
    }
  };

  // Save current answer
  const handleSaveAnswer = () => {
    if (!appState.currentAnswer) return;

    const currentSubreddit = appState.selectedSubreddit === 'custom' 
      ? appState.customSubreddit 
      : appState.selectedSubreddit;

    const shareableAnswer: ShareableAnswer = {
      id: generateId(),
      question: appState.question,
      subreddit: currentSubreddit,
      answer: appState.currentAnswer.answer,
      timestamp: Date.now(),
    };

    setAppState(prev => ({
      ...prev,
      savedAnswers: [shareableAnswer, ...prev.savedAnswers.slice(0, CONFIG.STORAGE.MAX_SAVED_ANSWERS - 1)],
    }));

    toast.success('Answer saved!');
  };

  // Share answer
  const handleShareAnswer = async (platform: 'copy' | 'twitter') => {
    if (!appState.currentAnswer) return;

    const currentSubreddit = appState.selectedSubreddit === 'custom' 
      ? appState.customSubreddit 
      : appState.selectedSubreddit;

    const shareText = formatForSharing(
      appState.question,
      currentSubreddit,
      appState.currentAnswer.answer
    );

    if (platform === 'copy') {
      const success = await copyToClipboard(shareText);
      if (success) {
        toast.success('Copied to clipboard!');
      } else {
        toast.error('Failed to copy to clipboard');
      }
    } else if (platform === 'twitter') {
      const twitterUrl = createTwitterUrl(shareText);
      window.open(twitterUrl, '_blank');
    }
  };

  const currentSubreddit = appState.selectedSubreddit === 'custom' 
    ? appState.customSubreddit 
    : appState.selectedSubreddit;

  const canSubmit = Boolean(currentSubreddit && appState.question && !appState.isLoading && rateLimit.allowed);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      {/* Header */}
      <header className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div className="flex items-center space-x-3">
              <div className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <SparklesIcon className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold gradient-text">Ask Reddit AI</h1>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  AI-powered answers from Reddit discussions
                </p>
              </div>
            </div>
            
            {/* Model Selector */}
            {/* <div className="mt-4 sm:mt-0">
              <select
                value={appState.selectedModel}
                onChange={(e) => setAppState(prev => ({ ...prev, selectedModel: e.target.value as 'gpt-4o-mini' | 'gpt-3.5-turbo' }))}
                className="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="gpt-4o-mini">GPT-4 (Better Quality)</option>
                <option value="gpt-3.5-turbo">GPT-3.5 Turbo (Faster)</option>
              </select>
            </div> */}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Disclaimer */}
        <div className="mb-8">
          <Disclaimer 
            isRateLimited={!rateLimit.allowed}
            remaining={rateLimit.remaining}
            resetTime={rateLimit.resetTime}
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Input Form */}
          <div className="lg:col-span-2 space-y-6">
            {/* Subreddit Selector */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 animate-fade-in">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Choose a Subreddit
              </h2>
              <SubredditSelector
                selectedSubreddit={appState.selectedSubreddit}
                customSubreddit={appState.customSubreddit}
                onSubredditChange={handleSubredditChange}
                onCustomSubredditChange={handleCustomSubredditChange}
                popularSubreddits={POPULAR_SUBREDDITS}
              />
            </div>

            {/* Question Input */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 animate-fade-in">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Ask Your Question
              </h2>
              <QuestionInput
                question={appState.question}
                onQuestionChange={handleQuestionChange}
                onSubmit={handleSubmitQuestion}
                isLoading={appState.isLoading}
                canSubmit={canSubmit}
              />
              {!rateLimit.allowed && (
                <div className="mt-4 text-sm text-red-600 dark:text-red-400">
                  Daily limit reached. Please check the disclaimer above for more information.
                </div>
              )}
            </div>

            {/* Answer Display */}
            {(appState.currentAnswer || appState.isLoading) && (
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 animate-fade-in">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    AI Response
                  </h2>
                  {appState.currentAnswer && (
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={handleSaveAnswer}
                        className="p-2 text-gray-500 hover:text-red-500 transition-colors"
                        title="Save answer"
                      >
                        <HeartIcon className="w-5 h-5" />
                      </button>
                      <button
                        onClick={() => handleShareAnswer('copy')}
                        className="p-2 text-gray-500 hover:text-blue-500 transition-colors"
                        title="Copy to clipboard"
                      >
                        <ClipboardDocumentIcon className="w-5 h-5" />
                      </button>
                      <button
                        onClick={() => handleShareAnswer('twitter')}
                        className="p-2 text-gray-500 hover:text-blue-400 transition-colors"
                        title="Share on Twitter"
                      >
                        <ShareIcon className="w-5 h-5" />
                      </button>
                    </div>
                  )}
                </div>
                {appState.isLoading ? (
                  <LoadingSpinner />
                ) : (
                  appState.currentAnswer && (
                    <AnswerDisplay answer={appState.currentAnswer} />
                  )
                )}
              </div>
            )}
          </div>

          {/* Right Column - Trending Questions */}
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 animate-fade-in">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Trending Questions
              </h2>
              <TrendingQuestions
                questions={TRENDING_QUESTIONS}
                onQuestionSelect={handleTrendingQuestionSelect}
              />
            </div>

            {/* Saved Answers */}
            {appState.savedAnswers.length > 0 && (
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 animate-fade-in">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                  Saved Answers
                </h2>
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {appState.savedAnswers.slice(0, 5).map((answer) => (
                    <div
                      key={answer.id}
                      className="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                      onClick={() => {
                        setAppState(prev => ({
                          ...prev,
                          question: answer.question,
                          selectedSubreddit: answer.subreddit,
                          customSubreddit: '',
                        }));
                      }}
                    >
                      <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                        {answer.question}
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        r/{answer.subreddit} • {new Date(answer.timestamp).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </main>

      {/* Footer */}
      <Footer />
    </div>
  );
}



================================================
FILE: src/app/api/ask-question/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { CONFIG } from '@/lib/constants';
import { handleApiError, extractRedditContent } from '@/lib/utils';
import type { AskQuestionRequest, AskQuestionResponse, AIResponse, SubredditData } from '@/types';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

// Reddit OAuth2 service for client credentials authentication
class RedditOAuthService {
  private accessToken: string | null = null;
  private tokenExpiry: Date | null = null;
  private config: {
    clientId: string;
    clientSecret: string;
    userAgent: string;
  };

  constructor() {
    this.config = {
      clientId: process.env.REDDIT_CLIENT_ID || '',
      clientSecret: process.env.REDDIT_CLIENT_SECRET || '',
      userAgent: 'ask-rddt-ai by /u/Witty_Ticket_4101'
    };

    if (!this.config.clientId || !this.config.clientSecret) {
      throw new Error('Reddit API credentials not configured. Please set REDDIT_CLIENT_ID and REDDIT_CLIENT_SECRET');
    }
  }

  // Get OAuth2 access token using client credentials
  private async getAccessToken(): Promise<string> {
    try {
      // Check if we have a valid token
      if (this.accessToken && this.tokenExpiry && new Date() < this.tokenExpiry) {
        return this.accessToken;
      }

      console.log('🔑 Requesting new Reddit OAuth2 token...');

      // Get new access token using client credentials
      const auth = Buffer.from(`${this.config.clientId}:${this.config.clientSecret}`).toString('base64');
      
      const response = await fetch('https://www.reddit.com/api/v1/access_token', {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${auth}`,
          'User-Agent': this.config.userAgent,
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: 'grant_type=client_credentials'
      });

      if (!response.ok) {
        throw new Error(`Reddit OAuth failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      this.accessToken = data.access_token;
      
      if (!this.accessToken) {
        throw new Error('No access token received from Reddit API');
      }
      
      // Token expires in 1 hour, set expiry to 50 minutes to be safe
      this.tokenExpiry = new Date(Date.now() + (50 * 60 * 1000));
      
      console.log('✅ Reddit OAuth2 token obtained successfully');
      return this.accessToken;
    } catch (error) {
      console.error('❌ Error getting Reddit access token:', error);
      throw new Error(`Failed to authenticate with Reddit API: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // Fetch Reddit data directly
  async fetchSubredditData(subreddit: string, timeframe: string = '24h', limit: number = 25): Promise<SubredditData> {
    try {
      const accessToken = await this.getAccessToken();
      
      const timeMap: Record<string, string> = {
        '24h': 'day',
        '48h': 'day',
        'week': 'week',
      };

      console.log(`📥 Fetching submissions from r/${subreddit} via OAuth...`);
      
      const response = await fetch(
        `https://oauth.reddit.com/r/${subreddit}/top?t=${timeMap[timeframe] || 'day'}&limit=${limit}`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'User-Agent': this.config.userAgent
          }
        }
      );

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error(`Subreddit r/${subreddit} not found`);
        }
        if (response.status === 403) {
          throw new Error(`Subreddit r/${subreddit} is private or banned`);
        }
        throw new Error(`Reddit API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data?.data?.children) {
        throw new Error(`No data received from r/${subreddit}`);
      }

      const posts = [];
      const allComments = [];

      // Process submissions
      for (const child of data.data.children.slice(0, limit)) {
        const post = child.data;
        
        if (!post.stickied) {
          posts.push({
            id: post.id,
            title: post.title,
            selftext: post.selftext || '',
            author: post.author || '[deleted]',
            score: post.score || 0,
            num_comments: post.num_comments || 0,
            created_utc: post.created_utc,
            url: post.url,
            subreddit: post.subreddit,
            permalink: post.permalink,
            upvote_ratio: post.upvote_ratio || 0,
          });

          // Fetch comments for top posts
          if (posts.length <= 5) {
            try {
              const comments = await this.fetchComments(post.id, 10);
              allComments.push(...comments);
            } catch (error) {
              console.error(`Error fetching comments for post ${post.id}:`, error);
            }
          }
        }
      }

      console.log(`📊 Fetched ${posts.length} posts and ${allComments.length} comments from r/${subreddit}`);
      
      return {
        posts: posts.sort((a, b) => b.score - a.score),
        comments: allComments.sort((a, b) => b.score - a.score),
        subreddit,
        fetchedAt: Date.now()
      };
    } catch (error) {
      console.error(`❌ Error fetching from r/${subreddit}:`, error);
      throw error;
    }
  }

  // Fetch comments for a submission
  async fetchComments(submissionId: string, limit: number = 10) {
    try {
      const accessToken = await this.getAccessToken();
      
      const response = await fetch(
        `https://oauth.reddit.com/comments/${submissionId}?limit=${limit}&sort=top&depth=2`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'User-Agent': this.config.userAgent
          }
        }
      );

      if (!response.ok) {
        throw new Error(`Error fetching comments: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data?.[1]?.data?.children) {
        return [];
      }

      const comments = [];
      const commentListing = data[1].data.children;

      for (const comment of commentListing.slice(0, limit)) {
        if (comment.kind === 't1' && comment.data.body && 
            comment.data.body !== '[deleted]' && 
            comment.data.body !== '[removed]') {
          comments.push({
            id: comment.data.id,
            body: comment.data.body,
            author: comment.data.author || '[deleted]',
            score: comment.data.score || 0,
            created_utc: comment.data.created_utc,
            depth: 0,
          });
        }
      }

      return comments.filter(c => c.score > 0).slice(0, limit);
    } catch (error) {
      console.error(`Error fetching comments for ${submissionId}:`, error);
      return [];
    }
  }
}

// Create a singleton instance
const redditService = new RedditOAuthService();

/**
 * Generate AI response based on Reddit data and user question
 */
async function generateAIResponse(
  question: string,
  redditContent: string,
  subreddit: string,
  model: 'gpt-4o-mini' | 'gpt-3.5-turbo'
): Promise<AIResponse> {
  const systemPrompt = `You are an AI assistant that analyzes Reddit discussions and provides comprehensive, well-structured answers to user questions.

Your task is to:
1. Analyze the provided Reddit posts and comments from r/${subreddit}
2. Synthesize the information to answer the user's question
3. Provide a balanced, informative response based on the community discussions
4. Include relevant insights, trends, and perspectives from the Reddit content
5. Be objective and acknowledge different viewpoints when they exist

Guidelines:
- Focus on factual information and community consensus
- Highlight interesting insights or unique perspectives
- If there are conflicting opinions, present multiple viewpoints
- Keep your response structured and easy to read
- Don't make assumptions beyond what's discussed in the Reddit content
- If the Reddit content doesn't adequately address the question, mention this limitation

Format your response in a clear, readable manner with appropriate paragraphs.`;

  const userPrompt = `Question: ${question}

Reddit Content from r/${subreddit}:
${redditContent}

Please provide a comprehensive answer based on the Reddit discussions above.`;

  try {
    const completion = await openai.chat.completions.create({
      model,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt },
      ],
      max_tokens: CONFIG.OPENAI.MAX_TOKENS,
      temperature: CONFIG.OPENAI.TEMPERATURE,
    });

    const answer = completion.choices[0]?.message?.content || 'No response generated';
    
    // Extract sources from the content (simplified - could be enhanced)
    const sources = [
      {
        title: `Recent discussions in r/${subreddit}`,
        url: `https://reddit.com/r/${subreddit}`,
        type: 'post' as const,
      },
    ];

    return {
      answer,
      sources,
      confidence: 0.85, // This could be calculated based on content quality
      model,
      tokens_used: completion.usage?.total_tokens,
    };
  } catch (error) {
    console.error('OpenAI API Error:', error);
    throw error;
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: AskQuestionRequest = await request.json();
    const { subreddit, question, model = CONFIG.OPENAI.DEFAULT_MODEL } = body;

    if (!subreddit || !question) {
      return NextResponse.json(
        { success: false, error: 'Subreddit and question are required' },
        { status: 400 }
      );
    }

    // Validate model
    if (!['gpt-4o-mini', 'gpt-3.5-turbo'].includes(model)) {
      return NextResponse.json(
        { success: false, error: 'Invalid model specified' },
        { status: 400 }
      );
    }

    // Fetch Reddit data directly (no HTTP request)
    console.log(`🔍 Processing question for r/${subreddit}: ${question}`);
    const redditData = await redditService.fetchSubredditData(subreddit, '24h', 25);
    
    if (!redditData.posts.length) {
      return NextResponse.json(
        { success: false, error: 'No recent content available for this subreddit' },
        { status: 404 }
      );
    }

    // Extract and prepare content for AI processing
    const redditContent = extractRedditContent(redditData.posts, redditData.comments);

    if (!redditContent || redditContent.length < 100) {
      return NextResponse.json(
        { success: false, error: 'Insufficient recent content in this subreddit' },
        { status: 404 }
      );
    }

    // Generate AI response
    const aiResponse = await generateAIResponse(question, redditContent, subreddit, model);

    const response: AskQuestionResponse = {
      success: true,
      data: aiResponse,
    };

    return NextResponse.json(response);
  } catch (error: unknown) {
    console.error('Ask Question API Error:', error);
    
    const appError = handleApiError(error);
    const response: AskQuestionResponse = {
      success: false,
      error: appError.message,
    };

    // Return appropriate HTTP status based on error type
    let status = 500;
    if (error && typeof error === 'object' && 'code' in error && error.code === 'insufficient_quota' || 
        (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('quota'))) {
      status = 429;
    } else if (error && typeof error === 'object' && 'status' in error && error.status === 401 || 
               (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('API key'))) {
      status = 401;
    }

    return NextResponse.json(response, { status });
  }
}

// Health check endpoint
export async function GET() {
  try {
    // Simple test to verify OpenAI API connection
    const testCompletion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: 'Hello' }],
      max_tokens: 5,
    });
    
    return NextResponse.json({
      success: true,
      message: 'OpenAI API connection successful',
      model: testCompletion.model,
      timestamp: Date.now(),
    });
  } catch (error) {
    console.error('OpenAI API Health Check Failed:', error);
    
    return NextResponse.json(
      {
        success: false,
        message: 'OpenAI API connection failed',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: Date.now(),
      },
      { status: 500 }
    );
  }
} 


================================================
FILE: src/app/api/reddit-data/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import { CONFIG } from '@/lib/constants';
import { handleApiError } from '@/lib/utils';
import type { RedditDataRequest, RedditDataResponse, RedditPost, RedditComment } from '@/types';

// Reddit OAuth2 service for client credentials authentication
class RedditOAuthService {
  private accessToken: string | null = null;
  private tokenExpiry: Date | null = null;
  private config: {
    clientId: string;
    clientSecret: string;
    userAgent: string;
  };

  constructor() {
    this.config = {
      clientId: process.env.REDDIT_CLIENT_ID || '',
      clientSecret: process.env.REDDIT_CLIENT_SECRET || '',
      userAgent: 'ask-rddt-ai by /u/Witty_Ticket_4101'
    };

    if (!this.config.clientId || !this.config.clientSecret) {
      throw new Error('Reddit API credentials not configured. Please set REDDIT_CLIENT_ID and REDDIT_CLIENT_SECRET');
    }
  }

  // Get OAuth2 access token using client credentials
  private async getAccessToken(): Promise<string> {
    try {
      // Check if we have a valid token
      if (this.accessToken && this.tokenExpiry && new Date() < this.tokenExpiry) {
        return this.accessToken;
      }

      console.log('🔑 Requesting new Reddit OAuth2 token...');

      // Get new access token using client credentials
      const auth = Buffer.from(`${this.config.clientId}:${this.config.clientSecret}`).toString('base64');
      
      const response = await fetch('https://www.reddit.com/api/v1/access_token', {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${auth}`,
          'User-Agent': this.config.userAgent,
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: 'grant_type=client_credentials'
      });

      if (!response.ok) {
        throw new Error(`Reddit OAuth failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      this.accessToken = data.access_token;
      
      if (!this.accessToken) {
        throw new Error('No access token received from Reddit API');
      }
      
      // Token expires in 1 hour, set expiry to 50 minutes to be safe
      this.tokenExpiry = new Date(Date.now() + (50 * 60 * 1000));
      
      console.log('✅ Reddit OAuth2 token obtained successfully');
      return this.accessToken;
    } catch (error) {
      console.error('❌ Error getting Reddit access token:', error);
      throw new Error(`Failed to authenticate with Reddit API: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // Fetch top submissions from a subreddit
  async fetchTopSubmissions(subreddit: string, timeframe: string, limit: number): Promise<{ posts: RedditPost[], comments: RedditComment[] }> {
    try {
      const accessToken = await this.getAccessToken();
      
      const timeMap: Record<string, string> = {
        '24h': 'day',
        '48h': 'day',
        'week': 'week',
      };

      console.log(`📥 Fetching submissions from r/${subreddit} via OAuth...`);
      
      const response = await fetch(
        `https://oauth.reddit.com/r/${subreddit}/top?t=${timeMap[timeframe] || 'day'}&limit=${limit}`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'User-Agent': this.config.userAgent
          }
        }
      );

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error(`Subreddit r/${subreddit} not found`);
        }
        if (response.status === 403) {
          throw new Error(`Subreddit r/${subreddit} is private or banned`);
        }
        throw new Error(`Reddit API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data?.data?.children) {
        throw new Error(`No data received from r/${subreddit}`);
      }

      const posts: RedditPost[] = [];
      const allComments: RedditComment[] = [];

      // Process submissions
      for (const child of data.data.children.slice(0, limit)) {
        const post = child.data;
        
        if (!post.stickied) {
          posts.push({
            id: post.id,
            title: post.title,
            selftext: post.selftext || '',
            author: post.author || '[deleted]',
            score: post.score || 0,
            num_comments: post.num_comments || 0,
            created_utc: post.created_utc,
            url: post.url,
            subreddit: post.subreddit,
            permalink: post.permalink,
            upvote_ratio: post.upvote_ratio || 0,
          });

          // Fetch comments for top posts
          if (posts.length <= 10) {
            try {
              const comments = await this.fetchComments(post.id, 100);
              allComments.push(...comments);
            } catch (error) {
              console.error(`Error fetching comments for post ${post.id}:`, error);
            }
          }
        }
      }

      console.log(`📊 Fetched ${posts.length} posts and ${allComments.length} comments from r/${subreddit}`);
      
      return {
        posts: posts.sort((a, b) => b.score - a.score),
        comments: allComments.sort((a, b) => b.score - a.score)
      };
    } catch (error) {
      console.error(`❌ Error fetching from r/${subreddit}:`, error);
      throw error;
    }
  }

  // Fetch comments for a submission
  async fetchComments(submissionId: string, limit: number = 10): Promise<RedditComment[]> {
    try {
      const accessToken = await this.getAccessToken();
      
      const response = await fetch(
        `https://oauth.reddit.com/comments/${submissionId}?limit=${limit}&sort=top&depth=2`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'User-Agent': this.config.userAgent
          }
        }
      );

      if (!response.ok) {
        throw new Error(`Error fetching comments: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data?.[1]?.data?.children) {
        return [];
      }

      const comments: RedditComment[] = [];
      const commentListing = data[1].data.children;

      for (const comment of commentListing.slice(0, limit)) {
        if (comment.kind === 't1' && comment.data.body && 
            comment.data.body !== '[deleted]' && 
            comment.data.body !== '[removed]') {
          comments.push({
            id: comment.data.id,
            body: comment.data.body,
            author: comment.data.author || '[deleted]',
            score: comment.data.score || 0,
            created_utc: comment.data.created_utc,
            depth: 0,
          });
        }
      }

      return comments;
    } catch (error) {
      console.error(`❌ Error fetching comments for ${submissionId}:`, error);
      return [];
    }
  }

  // Test connection
  async testConnection(): Promise<boolean> {
    try {
      console.log('🔍 Testing Reddit OAuth connection...');
      const accessToken = await this.getAccessToken();
      
      const response = await fetch('https://oauth.reddit.com/r/test/hot?limit=1', {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'User-Agent': this.config.userAgent
        }
      });

      const success = response.ok;
      console.log(success ? '✅ Reddit OAuth connection successful' : '❌ Reddit OAuth connection failed');
      return success;
    } catch (error) {
      console.error('❌ Reddit OAuth connection test failed:', error);
      return false;
    }
  }
}

// Create a singleton instance
const redditService = new RedditOAuthService();

export async function POST(request: NextRequest) {
  try {
    const body: RedditDataRequest = await request.json();
    const { subreddit, timeframe = CONFIG.REDDIT.DEFAULT_TIMEFRAME, limit = CONFIG.REDDIT.DEFAULT_LIMIT } = body;

    if (!subreddit) {
      return NextResponse.json(
        { success: false, error: 'Subreddit name is required' },
        { status: 400 }
      );
    }

    // Validate limit
    const validatedLimit = Math.min(Math.max(limit, 1), CONFIG.REDDIT.MAX_LIMIT);

    const { posts, comments } = await redditService.fetchTopSubmissions(subreddit, timeframe, validatedLimit);

    const response: RedditDataResponse = {
      success: true,
      data: {
        posts,
        comments,
        subreddit,
        fetchedAt: Date.now(),
      }
    };

    return NextResponse.json(response);
  } catch (error: unknown) {
    console.error('Reddit API Error:', error);
    
    const appError = handleApiError(error);
    const response: RedditDataResponse = {
      success: false,
      error: appError.message,
    };

    // Return appropriate HTTP status based on error type
    let status = 500;
    if (error instanceof Error) {
      if (error.message.includes('not found')) {
        status = 404;
      } else if (error.message.includes('private') || error.message.includes('banned')) {
        status = 403;
      } else if (error.message.includes('credentials')) {
        status = 401;
      }
    }

    return NextResponse.json(response, { status });
  }
}

// Health check endpoint
export async function GET() {
  try {
    const isConnected = await redditService.testConnection();
    
    return NextResponse.json({
      success: isConnected,
      message: isConnected ? 'Reddit API connection successful' : 'Reddit API connection failed',
      timestamp: Date.now(),
    });
  } catch (error) {
    console.error('Reddit API Health Check Failed:', error);
    
    return NextResponse.json(
      {
        success: false,
        message: 'Reddit API connection failed',
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
} 


================================================
FILE: src/components/AnswerDisplay.tsx
================================================
import React, { useState } from 'react';
import { 
  LinkIcon, 
  SparklesIcon, 
  InformationCircleIcon,
  ChevronDownIcon,
  ChevronUpIcon 
} from '@heroicons/react/24/outline';
import { cn, formatNumber } from '@/lib/utils';
import type { AIResponse } from '@/types';

interface AnswerDisplayProps {
  answer: AIResponse;
}

const AnswerDisplay: React.FC<AnswerDisplayProps> = ({ answer }) => {
  const [showSources, setShowSources] = useState(false);
  const [showMetadata, setShowMetadata] = useState(false);

  // Format the answer text with better readability
  const formatAnswer = (text: string) => {
    return text
      .split('\n\n')
      .map((paragraph, index) => {
        if (paragraph.trim() === '') return null;
        
        // Check if paragraph is a list
        if (paragraph.includes('•') || paragraph.includes('-') || /^\d+\./.test(paragraph.trim())) {
          const items = paragraph.split('\n').filter(item => item.trim());
          return (
            <ul key={index} className="space-y-2 mb-4 pl-4">
              {items.map((item, itemIndex) => (
                <li key={itemIndex} className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  {item.replace(/^[•\-\d+\.]\s*/, '')}
                </li>
              ))}
            </ul>
          );
        }
        
        // Regular paragraph
        return (
          <p key={index} className="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">
            {paragraph}
          </p>
        );
      })
      .filter(Boolean);
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-500';
    if (confidence >= 0.6) return 'text-yellow-500';
    return 'text-orange-500';
  };

  const getConfidenceLabel = (confidence: number) => {
    if (confidence >= 0.8) return 'High';
    if (confidence >= 0.6) return 'Medium';
    return 'Low';
  };

  return (
    <div className="space-y-6">
      {/* Answer Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
            <SparklesIcon className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              AI Analysis
            </h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Based on recent Reddit discussions
            </p>
          </div>
        </div>
        
        {/* Confidence Badge */}
        <div className="flex items-center space-x-2">
          <span className={cn("text-sm font-medium", getConfidenceColor(answer.confidence))}>
            {getConfidenceLabel(answer.confidence)} Confidence
          </span>
          <div className="w-16 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
            <div 
              className={cn("h-full rounded-full transition-all duration-300", {
                'bg-green-500': answer.confidence >= 0.8,
                'bg-yellow-500': answer.confidence >= 0.6 && answer.confidence < 0.8,
                'bg-orange-500': answer.confidence < 0.6,
              })}
              style={{ width: `${answer.confidence * 100}%` }}
            />
          </div>
        </div>
      </div>

      {/* Answer Content */}
      <div className="prose prose-sm max-w-none">
        <div className="p-6 bg-gradient-to-br from-gray-50 to-white dark:from-gray-800 dark:to-gray-700 rounded-xl border border-gray-200 dark:border-gray-600">
          {formatAnswer(answer.answer)}
        </div>
      </div>

      {/* Sources Section */}
      <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
        <button
          onClick={() => setShowSources(!showSources)}
          className="flex items-center justify-between w-full p-3 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors"
        >
          <div className="flex items-center space-x-2">
            <LinkIcon className="w-5 h-5 text-gray-500 dark:text-gray-400" />
            <span className="text-sm font-medium text-gray-900 dark:text-white">
              Sources ({answer.sources.length})
            </span>
          </div>
          {showSources ? (
            <ChevronUpIcon className="w-5 h-5 text-gray-500" />
          ) : (
            <ChevronDownIcon className="w-5 h-5 text-gray-500" />
          )}
        </button>

        {showSources && (
          <div className="mt-3 space-y-2 animate-fade-in">
            {answer.sources.map((source, index) => (
              <div key={index} className="p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900 dark:text-white">
                      {source.title}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      Type: {source.type}
                    </p>
                  </div>
                  <a
                    href={source.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="ml-3 text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
                  >
                    <LinkIcon className="w-4 h-4" />
                  </a>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Metadata Section */}
      <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
        <button
          onClick={() => setShowMetadata(!showMetadata)}
          className="flex items-center justify-between w-full p-3 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors"
        >
          <div className="flex items-center space-x-2">
            <InformationCircleIcon className="w-5 h-5 text-gray-500 dark:text-gray-400" />
            <span className="text-sm font-medium text-gray-900 dark:text-white">
              Technical Details
            </span>
          </div>
          {showMetadata ? (
            <ChevronUpIcon className="w-5 h-5 text-gray-500" />
          ) : (
            <ChevronDownIcon className="w-5 h-5 text-gray-500" />
          )}
        </button>

        {showMetadata && (
          <div className="mt-3 p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg animate-fade-in">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500 dark:text-gray-400">Model:</span>
                <span className="ml-2 font-medium text-gray-900 dark:text-white">
                  {answer.model}
                </span>
              </div>
              <div>
                <span className="text-gray-500 dark:text-gray-400">Confidence:</span>
                <span className={cn("ml-2 font-medium", getConfidenceColor(answer.confidence))}>
                  {Math.round(answer.confidence * 100)}%
                </span>
              </div>
              {answer.tokens_used && (
                <div>
                  <span className="text-gray-500 dark:text-gray-400">Tokens Used:</span>
                  <span className="ml-2 font-medium text-gray-900 dark:text-white">
                    {formatNumber(answer.tokens_used)}
                  </span>
                </div>
              )}
              <div>
                <span className="text-gray-500 dark:text-gray-400">Sources:</span>
                <span className="ml-2 font-medium text-gray-900 dark:text-white">
                  {answer.sources.length} references
                </span>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Disclaimer */}
      <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
        <div className="flex items-start space-x-3">
          <InformationCircleIcon className="w-5 h-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5" />
          <div>
            <p className="text-sm text-yellow-800 dark:text-yellow-200">
              <strong>Disclaimer:</strong> This answer is generated by AI based on Reddit discussions and should be considered as informational guidance rather than professional advice.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AnswerDisplay; 


================================================
FILE: src/components/Disclaimer.tsx
================================================
import React from 'react';
import { InformationCircleIcon, ExclamationTriangleIcon, CodeBracketIcon } from '@heroicons/react/24/outline';
import { CONFIG } from '@/lib/constants';
import { formatTimeRemaining } from '@/lib/utils';

interface DisclaimerProps {
  isRateLimited?: boolean;
  remaining?: number;
  resetTime?: number;
}

// Check if we're in development mode
const isDevelopment = () => {
  if (typeof window === 'undefined') return false;
  return window.location.hostname === 'localhost' || 
         window.location.hostname === '127.0.0.1' ||
         window.location.hostname === '0.0.0.0' ||
         process.env.NODE_ENV === 'development';
};

const Disclaimer: React.FC<DisclaimerProps> = ({ 
  isRateLimited = false, 
  remaining = CONFIG.RATE_LIMIT.MAX_REQUESTS,
  resetTime = Date.now() 
}) => {
  const isInDevelopment = isDevelopment();
  
  if (isRateLimited) {
    return (
      <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
        <div className="flex items-start space-x-3">
          <ExclamationTriangleIcon className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5" />
          <div>
            <h3 className="text-sm font-medium text-red-800 dark:text-red-200 mb-2">
              Daily Limit Reached
            </h3>
            <p className="text-sm text-red-700 dark:text-red-300 mb-3">
              You&apos;ve used all {CONFIG.RATE_LIMIT.MAX_REQUESTS} daily requests. The limit resets in{' '}
              <strong>{formatTimeRemaining(resetTime)}</strong>.
            </p>
            <div className="space-y-2">
              <p className="text-sm text-red-700 dark:text-red-300">
                <strong>Want unlimited access?</strong>
              </p>
              <div className="flex flex-col sm:flex-row gap-2">
                <a
                  href={CONFIG.CONTACT.LINKEDIN}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors"
                >
                  Contact me on LinkedIn
                </a>
                <a
                  href={CONFIG.CONTACT.GITHUB}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors"
                >
                  Get the source code
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Development mode disclaimer
  if (isInDevelopment) {
    return (
      <div className="p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
        <div className="flex items-start space-x-3">
          <CodeBracketIcon className="w-5 h-5 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5" />
          <div>
            <h3 className="text-sm font-medium text-green-800 dark:text-green-200 mb-2">
              Development Mode
            </h3>
            <div className="text-sm text-green-700 dark:text-green-300 space-y-2">
              <p>
                <strong>Unlimited requests</strong> available in development mode. 
                This application is for <strong>informational and entertainment purposes only</strong>.
              </p>
              <p>
                In production, users get {CONFIG.RATE_LIMIT.MAX_REQUESTS} requests per day to manage OpenAI costs.
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Production disclaimer
  return (
    <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
      <div className="flex items-start space-x-3">
        <InformationCircleIcon className="w-5 h-5 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5" />
        <div>
          <h3 className="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">
            Disclaimer
          </h3>
          <div className="text-sm text-blue-700 dark:text-blue-300 space-y-2">
            <p>
              This application is for <strong>informational and entertainment purposes only</strong>. 
              AI responses are generated based on Reddit discussions and should not be considered 
              professional advice.
            </p>
            <p>
              <strong>Rate Limit:</strong> {remaining} of {CONFIG.RATE_LIMIT.MAX_REQUESTS} daily requests remaining. Feel free to contact me on LinkedIn or fork GitHub repo and use your own OpenAI key.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Disclaimer; 


================================================
FILE: src/components/Footer.tsx
================================================
import React from 'react';
import { HeartIcon } from '@heroicons/react/24/solid';
import { CONFIG } from '@/lib/constants';

const Footer: React.FC = () => {
  return (
    <footer className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-t border-gray-200 dark:border-gray-700 mt-16">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
          {/* Left side - Made with love */}
          <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
            <span>Made with</span>
            <HeartIcon className="w-4 h-4 text-red-500" />
            <span>by Vladimir Bichev</span>
          </div>

          {/* Center - Links */}
          <div className="flex items-center space-x-6">
            <a
              href={CONFIG.CONTACT.LINKEDIN}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
              <span>LinkedIn</span>
            </a>
            
            <a
              href={CONFIG.CONTACT.GITHUB}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
              <span>GitHub</span>
            </a>
          </div>

          {/* Right side - Purpose */}
          <div className="text-xs text-gray-500 dark:text-gray-500 text-center md:text-right">
            <p>For informational & entertainment purposes only</p>
            <p>Not professional advice</p>
          </div>
        </div>
        
        {/* Bottom disclaimer */}
        <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
          <p className="text-xs text-gray-500 dark:text-gray-500 text-center">
            This project demonstrates AI integration with Reddit&apos;s API. Responses are AI-generated based on public Reddit discussions 
            and should not be considered professional advice. Use for educational and entertainment purposes only.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer; 


================================================
FILE: src/components/LoadingSpinner.tsx
================================================
import React from 'react';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  text?: string;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ 
  size = 'md', 
  text = 'Generating your AI-powered answer...' 
}) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12',
  };

  return (
    <div className="flex flex-col items-center justify-center py-8">
      {/* Spinner */}
      <div className="relative">
        <div className={`${sizeClasses[size]} border-4 border-gray-200 dark:border-gray-600 rounded-full animate-spin`}>
          <div className="absolute top-0 left-0 w-full h-full border-t-4 border-blue-500 rounded-full animate-spin"></div>
        </div>
        
        {/* Pulsing dots */}
        <div className="absolute -bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-1">
          <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
          <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
          <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
        </div>
      </div>

      {/* Loading text */}
      <div className="mt-8 text-center">
        <p className="text-sm text-gray-600 dark:text-gray-400 loading-dots">
          {text}
        </p>
        <p className="text-xs text-gray-500 dark:text-gray-500 mt-2">
          This may take a few moments...
        </p>
      </div>
    </div>
  );
};

export default LoadingSpinner; 


================================================
FILE: src/components/QuestionInput.tsx
================================================
import React, { KeyboardEvent } from 'react';
import { PaperAirplaneIcon } from '@heroicons/react/24/outline';
import { cn } from '@/lib/utils';
import { VALIDATION } from '@/lib/constants';

interface QuestionInputProps {
  question: string;
  onQuestionChange: (question: string) => void;
  onSubmit: () => void;
  isLoading: boolean;
  canSubmit: boolean;
}

const QuestionInput: React.FC<QuestionInputProps> = ({
  question,
  onQuestionChange,
  onSubmit,
  isLoading,
  canSubmit,
}) => {
  const characterCount = question.length;
  const isNearLimit = characterCount > VALIDATION.QUESTION.MAX_LENGTH * 0.8;
  const isOverLimit = characterCount > VALIDATION.QUESTION.MAX_LENGTH;

  const handleKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
      e.preventDefault();
      if (canSubmit) {
        onSubmit();
      }
    }
  };

  const handleSubmit = () => {
    if (canSubmit) {
      onSubmit();
    }
  };

  return (
    <div className="space-y-4">
      {/* Question Input */}
      <div className="relative">
        <textarea
          value={question}
          onChange={(e) => onQuestionChange(e.target.value)}
          onKeyDown={handleKeyPress}
          placeholder="What would you like to know? Ask a question about the selected subreddit..."
          rows={4}
          disabled={isLoading}
          className={cn(
            "w-full px-4 py-3 pr-12 text-sm resize-none",
            "bg-white dark:bg-gray-700 border rounded-lg",
            "placeholder-gray-500 dark:placeholder-gray-400",
            "focus:ring-2 focus:ring-blue-500 focus:border-transparent",
            "transition-colors duration-200",
            isOverLimit 
              ? "border-red-500 dark:border-red-400" 
              : "border-gray-300 dark:border-gray-600",
            isLoading && "opacity-50 cursor-not-allowed"
          )}
        />
        
        {/* Character counter */}
        <div className={cn(
          "absolute bottom-2 right-2 text-xs",
          isOverLimit 
            ? "text-red-500 dark:text-red-400"
            : isNearLimit 
              ? "text-yellow-500 dark:text-yellow-400"
              : "text-gray-400 dark:text-gray-500"
        )}>
          {characterCount}/{VALIDATION.QUESTION.MAX_LENGTH}
        </div>
      </div>

      {/* Validation Messages */}
      {isOverLimit && (
        <p className="text-sm text-red-500 dark:text-red-400 animate-fade-in">
          Question is too long. Please keep it under {VALIDATION.QUESTION.MAX_LENGTH} characters.
        </p>
      )}

      {question.length > 0 && question.length < VALIDATION.QUESTION.MIN_LENGTH && (
        <p className="text-sm text-yellow-500 dark:text-yellow-400 animate-fade-in">
          Question should be at least {VALIDATION.QUESTION.MIN_LENGTH} characters long.
        </p>
      )}

      {/* Example Questions */}
      {question.length === 0 && (
        <div className="space-y-2 animate-fade-in">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            💡 Example questions:
          </p>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
            {[
              "What are the current trends in AI development?",
              "How do beginners get started with investing?",
              "What programming languages are most in demand?",
              "What are the best practices for remote work?",
            ].map((example, index) => (
              <button
                key={index}
                onClick={() => onQuestionChange(example)}
                className="text-left p-2 text-xs text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors"
              >
                &ldquo;{example}&rdquo;
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Submit Button */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
          <span>Press Cmd/Ctrl + Enter to submit</span>
          {question.length > 0 && (
            <span>
              ~{Math.ceil(question.length / 5)} words
            </span>
          )}
        </div>
        
        <button
          onClick={handleSubmit}
          disabled={!canSubmit}
          className={cn(
            "flex items-center space-x-2 px-6 py-3 rounded-lg font-medium text-sm",
            "transition-all duration-200 transform",
            canSubmit
              ? "bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-lg hover:shadow-xl hover:scale-105"
              : "bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed",
            isLoading && "animate-pulse"
          )}
        >
          {isLoading ? (
            <>
              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span>Getting Answer...</span>
            </>
          ) : (
            <>
              <PaperAirplaneIcon className="w-4 h-4" />
              <span>Ask AI</span>
            </>
          )}
        </button>
      </div>

      {/* Helpful Tips */}
      {question.length > 50 && (
        <div className="p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg animate-fade-in">
          <p className="text-sm text-blue-800 dark:text-blue-200">
            💡 <strong>Tip:</strong> The more specific your question, the better the AI can analyze relevant discussions and provide insights.
          </p>
        </div>
      )}
    </div>
  );
};

export default QuestionInput; 


================================================
FILE: src/components/SubredditSelector.tsx
================================================
import React, { useState } from 'react';
import { ChevronDownIcon, MagnifyingGlassIcon } from '@heroicons/react/24/outline';
import { cn } from '@/lib/utils';
import type { PopularSubreddit } from '@/types';

interface SubredditSelectorProps {
  selectedSubreddit: string;
  customSubreddit: string;
  onSubredditChange: (subreddit: string) => void;
  onCustomSubredditChange: (customSubreddit: string) => void;
  popularSubreddits: PopularSubreddit[];
}

const SubredditSelector: React.FC<SubredditSelectorProps> = ({
  selectedSubreddit,
  customSubreddit,
  onSubredditChange,
  onCustomSubredditChange,
  popularSubreddits,
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredSubreddits = popularSubreddits.filter(subreddit =>
    subreddit.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    subreddit.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubredditSelect = (subreddit: string) => {
    onSubredditChange(subreddit);
    setIsDropdownOpen(false);
    setSearchTerm('');
  };

  const getDisplayText = () => {
    if (selectedSubreddit === 'custom') {
      return customSubreddit ? `r/${customSubreddit}` : 'Enter custom subreddit...';
    }
    return `r/${selectedSubreddit}`;
  };

  const getSelectedSubredditInfo = () => {
    if (selectedSubreddit === 'custom') return null;
    return popularSubreddits.find(sub => sub.name === selectedSubreddit);
  };

  const selectedInfo = getSelectedSubredditInfo();

  return (
    <div className="space-y-4">
      {/* Dropdown Selector */}
      <div className="relative">
        <button
          onClick={() => setIsDropdownOpen(!isDropdownOpen)}
          className={cn(
            "w-full flex items-center justify-between px-4 py-3 text-left",
            "bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600",
            "border border-gray-300 dark:border-gray-600 rounded-lg",
            "transition-colors duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          )}
        >
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
              r/
            </div>
            <div>
              <p className="text-sm font-medium text-gray-900 dark:text-white">
                {getDisplayText()}
              </p>
              {selectedInfo && (
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  {selectedInfo.description}
                </p>
              )}
            </div>
          </div>
          <ChevronDownIcon 
            className={cn(
              "w-5 h-5 text-gray-400 transition-transform duration-200",
              isDropdownOpen && "rotate-180"
            )} 
          />
        </button>

        {/* Dropdown Menu */}
        {isDropdownOpen && (
          <div className="absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg animate-fade-in">
            {/* Search Bar */}
            <div className="p-3 border-b border-gray-200 dark:border-gray-700">
              <div className="relative">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search subreddits..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 text-sm bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>

            {/* Subreddit List */}
            <div className="max-h-64 overflow-y-auto">
              {/* Custom Subreddit Option */}
              <button
                onClick={() => handleSubredditSelect('custom')}
                className={cn(
                  "w-full flex items-center space-x-3 px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors",
                  selectedSubreddit === 'custom' && "bg-blue-50 dark:bg-blue-900/20 border-r-2 border-blue-500"
                )}
              >
                <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                  +
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-900 dark:text-white">
                    Custom Subreddit
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Enter any subreddit name
                  </p>
                </div>
              </button>

              {/* Popular Subreddits */}
              {filteredSubreddits.map((subreddit) => (
                <button
                  key={subreddit.name}
                  onClick={() => handleSubredditSelect(subreddit.name)}
                  className={cn(
                    "w-full flex items-center space-x-3 px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors",
                    selectedSubreddit === subreddit.name && "bg-blue-50 dark:bg-blue-900/20 border-r-2 border-blue-500"
                  )}
                >
                  <div className="w-8 h-8 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                    r/
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium text-gray-900 dark:text-white">
                        r/{subreddit.name}
                      </p>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {subreddit.subscribers}
                      </span>
                    </div>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {subreddit.description}
                    </p>
                  </div>
                </button>
              ))}

              {/* No Results */}
              {filteredSubreddits.length === 0 && searchTerm && (
                <div className="px-4 py-3 text-center text-sm text-gray-500 dark:text-gray-400">
                  No subreddits found matching &ldquo;{searchTerm}&rdquo;
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Custom Subreddit Input */}
      {selectedSubreddit === 'custom' && (
        <div className="animate-slide-in">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Enter Subreddit Name
          </label>
          <div className="relative">
            <input
              type="text"
              value={customSubreddit}
              onChange={(e) => onCustomSubredditChange(e.target.value.replace(/^r\//, ''))}
              placeholder="Enter subreddit name (e.g., &ldquo;technology&rdquo;)"
              className="w-full px-4 py-3 pr-12 text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">
              r/
            </div>
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Enter the subreddit name without &ldquo;r/&rdquo; prefix
          </p>
        </div>
      )}

      {/* Selected Subreddit Info */}
      {selectedInfo && (
        <div className="p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-900 dark:text-white">
                r/{selectedInfo.name}
              </p>
              <p className="text-xs text-gray-600 dark:text-gray-400">
                {selectedInfo.description}
              </p>
            </div>
            <span className="text-xs text-blue-600 dark:text-blue-400 font-medium">
              {selectedInfo.subscribers} members
            </span>
          </div>
        </div>
      )}
    </div>
  );
};

export default SubredditSelector; 


================================================
FILE: src/components/TrendingQuestions.tsx
================================================
import React from 'react';
import { FireIcon, HashtagIcon } from '@heroicons/react/24/outline';
import { cn } from '@/lib/utils';
import type { TrendingQuestion } from '@/types';

interface TrendingQuestionsProps {
  questions: TrendingQuestion[];
  onQuestionSelect: (question: string, subreddit: string) => void;
}

const TrendingQuestions: React.FC<TrendingQuestionsProps> = ({
  questions,
  onQuestionSelect,
}) => {
  const getPopularityColor = (popularity: number) => {
    if (popularity >= 90) return 'text-red-500';
    if (popularity >= 80) return 'text-orange-500';
    if (popularity >= 70) return 'text-yellow-500';
    return 'text-green-500';
  };

  const getPopularityIcon = (popularity: number) => {
    if (popularity >= 90) return '🔥';
    if (popularity >= 80) return '⚡';
    if (popularity >= 70) return '📈';
    return '💡';
  };

  return (
    <div className="space-y-4">
      {questions.map((item) => (
        <div
          key={item.id}
          className="group cursor-pointer"
          onClick={() => onQuestionSelect(item.question, item.subreddit)}
        >
          <div className="p-4 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-all duration-200 hover:shadow-md group-hover:scale-[1.02]">
            {/* Header */}
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center space-x-2">
                <span className="text-lg">
                  {getPopularityIcon(item.popularity)}
                </span>
                <span className="text-xs text-gray-500 dark:text-gray-400 font-medium">
                  r/{item.subreddit}
                </span>
              </div>
              <div className="flex items-center space-x-1">
                <FireIcon className={cn("w-4 h-4", getPopularityColor(item.popularity))} />
                <span className={cn("text-xs font-bold", getPopularityColor(item.popularity))}>
                  {item.popularity}%
                </span>
              </div>
            </div>

            {/* Question */}
            <p className="text-sm font-medium text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
              {item.question}
            </p>

            {/* Tags */}
            <div className="flex flex-wrap gap-1">
              {item.tags.map((tag, tagIndex) => (
                <span
                  key={tagIndex}
                  className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400"
                >
                  <HashtagIcon className="w-3 h-3 mr-1" />
                  {tag}
                </span>
              ))}
            </div>

            {/* Hover indicator */}
            <div className="mt-3 flex items-center text-xs text-gray-400 dark:text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity">
              <span>Click to ask this question</span>
              <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </div>
        </div>
      ))}

      {/* Empty State */}
      {questions.length === 0 && (
        <div className="text-center py-8">
          <FireIcon className="w-12 h-12 text-gray-300 dark:text-gray-600 mx-auto mb-3" />
          <p className="text-sm text-gray-500 dark:text-gray-400">
            No trending questions available
          </p>
        </div>
      )}

      {/* Footer */}
      <div className="mt-6 p-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
        <div className="flex items-center space-x-2 mb-2">
          <FireIcon className="w-4 h-4 text-blue-500" />
          <span className="text-sm font-medium text-gray-900 dark:text-white">
            Trending Now
          </span>
        </div>
        <p className="text-xs text-gray-600 dark:text-gray-400">
          These questions are currently popular and getting great AI-powered answers from our community.
        </p>
      </div>
    </div>
  );
};

export default TrendingQuestions; 


================================================
FILE: src/lib/constants.ts
================================================
import { PopularSubreddit, TrendingQuestion } from '@/types';

// Popular subreddits with descriptions
export const POPULAR_SUBREDDITS: PopularSubreddit[] = [
  {
    name: 'AskReddit',
    description: 'Open-ended questions for discussion',
    subscribers: '45M',
  },
  {
    name: 'technology',
    description: 'Latest tech news and discussions',
    subscribers: '14M',
  },
  {
    name: 'programming',
    description: 'Computer programming discussions',
    subscribers: '5M',
  },
  { 
    name: 'wallstreetbets',
    description: 'Wall Street Bets discussions',
    subscribers: '1.5M',
  },
  { name: 'cursor',
    description: 'Cursor discussions',
    subscribers: '500M',
  },
  {
    name: 'science',
    description: 'Science news and research',
    subscribers: '28M',
  },
  {
    name: 'investing',
    description: 'Investment strategies and market analysis',
    subscribers: '2M',
  },
  {
    name: 'entrepreneur',
    description: 'Entrepreneurship and startup discussions',
    subscribers: '1M',
  },
  {
    name: 'MachineLearning',
    description: 'ML research and applications',
    subscribers: '2.5M',
  },
  {
    name: 'cryptocurrency',
    description: 'Crypto news and analysis',
    subscribers: '6M',
  },
  {
    name: 'startups',
    description: 'Startup ecosystem discussions',
    subscribers: '1.5M',
  },
  {
    name: 'datascience',
    description: 'Data science and analytics',
    subscribers: '1.8M',
  },
];

// Sample trending questions
export const TRENDING_QUESTIONS: TrendingQuestion[] = [
  {
    id: '1',
    question: 'What are the most promising AI startups in 2025?',
    subreddit: 'MachineLearning',
    popularity: 95,
    tags: ['ai', 'startups', '2025'],
  },
  {
    id: '2',
    question: 'How do successful entrepreneurs handle failure?',
    subreddit: 'entrepreneur',
    popularity: 88,
    tags: ['entrepreneurship', 'failure', 'mindset'],
  },
  {
    id: '3',
    question: 'What programming languages should I learn in 2025?',
    subreddit: 'programming',
    popularity: 92,
    tags: ['programming', 'career', '2025'],
  },
  {
    id: '4',
    question: 'Best investment strategies for beginners?',
    subreddit: 'investing',
    popularity: 85,
    tags: ['investing', 'beginners', 'strategy'],
  },
  {
    id: '5',
    question: 'What are the biggest technology trends this year?',
    subreddit: 'technology',
    popularity: 90,
    tags: ['technology', 'trends', 'innovation'],
  },
];

// Configuration constants
export const CONFIG = {
  REDDIT: {
    DEFAULT_LIMIT: 25,
    MAX_LIMIT: 100,
    DEFAULT_TIMEFRAME: '24h' as const,
  },
  OPENAI: {
    DEFAULT_MODEL: 'gpt-4o-mini' as const,
    MAX_TOKENS: 4000,
    TEMPERATURE: 0.7,
  },
  UI: {
    DEBOUNCE_DELAY: 300,
    ANIMATION_DURATION: 300,
    TOAST_DURATION: 4000,
  },
  STORAGE: {
    SAVED_ANSWERS_KEY: 'ask-reddit-ai-saved-answers',
    PREFERENCES_KEY: 'ask-reddit-ai-preferences',
    RATE_LIMIT_KEY: 'ask-reddit-ai-rate-limit',
    MAX_SAVED_ANSWERS: 50,
  },
  RATE_LIMIT: {
    MAX_REQUESTS: 3,
    RESET_HOURS: 24,
  },
  CONTACT: {
    LINKEDIN: 'https://www.linkedin.com/in/vladimir-bichev-383b1525/',
    GITHUB: 'https://github.com/Bichev/ask-reddit-ai',
    EMAIL: 'baker@sobrd.com', // Replace with your email
  },
} as const;

// API endpoints
export const API_ENDPOINTS = {
  ASK_QUESTION: '/api/ask-question',
  FETCH_REDDIT_DATA: '/api/reddit-data',
  HEALTH_CHECK: '/api/health',
} as const;

// Error messages
export const ERROR_MESSAGES = {
  SUBREDDIT_NOT_FOUND: 'Subreddit not found. Please check the spelling and try again.',
  QUESTION_TOO_SHORT: 'Please enter a question with at least 5 characters.',
  QUESTION_TOO_LONG: 'Question is too long. Please keep it under 500 characters.',
  NO_REDDIT_DATA: 'No recent posts found in this subreddit. Try a different one.',
  OPENAI_ERROR: 'Failed to generate answer. Please try again.',
  NETWORK_ERROR: 'Network error. Please check your connection and try again.',
  RATE_LIMIT: 'Too many requests. Please wait a moment before trying again.',
  GENERIC_ERROR: 'Something went wrong. Please try again.',
} as const;

// Validation rules
export const VALIDATION = {
  SUBREDDIT: {
    MIN_LENGTH: 1,
    MAX_LENGTH: 50,
    PATTERN: /^[a-zA-Z0-9_]+$/,
  },
  QUESTION: {
    MIN_LENGTH: 5,
    MAX_LENGTH: 500,
  },
} as const; 


================================================
FILE: src/lib/utils.ts
================================================
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { VALIDATION, ERROR_MESSAGES, CONFIG } from './constants';
import type { AppError, RedditPost, RedditComment } from '@/types';

/**
 * Utility function to merge Tailwind CSS classes
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * Validate subreddit name
 */
export function validateSubreddit(subreddit: string): { isValid: boolean; error?: string } {
  if (!subreddit) {
    return { isValid: false, error: 'Subreddit name is required' };
  }

  if (subreddit.length < VALIDATION.SUBREDDIT.MIN_LENGTH) {
    return { isValid: false, error: 'Subreddit name is too short' };
  }

  if (subreddit.length > VALIDATION.SUBREDDIT.MAX_LENGTH) {
    return { isValid: false, error: 'Subreddit name is too long' };
  }

  if (!VALIDATION.SUBREDDIT.PATTERN.test(subreddit)) {
    return { isValid: false, error: 'Subreddit name can only contain letters, numbers, and underscores' };
  }

  return { isValid: true };
}

/**
 * Validate question
 */
export function validateQuestion(question: string): { isValid: boolean; error?: string } {
  if (!question || question.trim().length === 0) {
    return { isValid: false, error: 'Question is required' };
  }

  const trimmedQuestion = question.trim();

  if (trimmedQuestion.length < VALIDATION.QUESTION.MIN_LENGTH) {
    return { isValid: false, error: ERROR_MESSAGES.QUESTION_TOO_SHORT };
  }

  if (trimmedQuestion.length > VALIDATION.QUESTION.MAX_LENGTH) {
    return { isValid: false, error: ERROR_MESSAGES.QUESTION_TOO_LONG };
  }

  return { isValid: true };
}

/**
 * Format timestamp to readable date
 */
export function formatDate(timestamp: number): string {
  const date = new Date(timestamp * 1000);
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffHours / 24);

  if (diffHours < 1) {
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    return `${diffMinutes}m ago`;
  } else if (diffHours < 24) {
    return `${diffHours}h ago`;
  } else if (diffDays < 7) {
    return `${diffDays}d ago`;
  } else {
    return date.toLocaleDateString();
  }
}

/**
 * Format number with K/M suffix
 */
export function formatNumber(num: number): string {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
}

/**
 * Truncate text to specified length
 */
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength).trim() + '...';
}

/**
 * Clean and prepare Reddit post text for AI processing
 */
export function cleanRedditText(text: string): string {
  return text
    // Remove markdown formatting
    .replace(/\*\*(.*?)\*\*/g, '$1')
    .replace(/\*(.*?)\*/g, '$1')
    .replace(/~~(.*?)~~/g, '$1')
    .replace(/`(.*?)`/g, '$1')
    // Remove URLs
    .replace(/https?:\/\/[^\s]+/g, '[URL]')
    // Remove Reddit-specific formatting
    .replace(/\/r\/[a-zA-Z0-9_]+/g, '[SUBREDDIT]')
    .replace(/\/u\/[a-zA-Z0-9_]+/g, '[USER]')
    // Clean up whitespace
    .replace(/\n{3,}/g, '\n\n')
    .replace(/\s{2,}/g, ' ')
    .trim();
}

/**
 * Extract meaningful content from Reddit posts and comments
 */
export function extractRedditContent(posts: RedditPost[], comments: RedditComment[]): string {
  const postContent = posts
    .filter(post => post.selftext && post.selftext.length > 50)
    .slice(0, 10) // Limit to top 10 posts
    .map(post => {
      const title = post.title;
      const content = cleanRedditText(post.selftext);
      const score = post.score;
      return `POST (${score} upvotes): ${title}\n${content}`;
    })
    .join('\n\n---\n\n');

  const commentContent = comments
    .filter(comment => comment.body && comment.body.length > 30 && comment.score > 0)
    .slice(0, 15) // Limit to top 15 comments
    .map(comment => {
      const content = cleanRedditText(comment.body);
      const score = comment.score;
      return `COMMENT (${score} upvotes): ${content}`;
    })
    .join('\n\n---\n\n');

  return [postContent, commentContent].filter(Boolean).join('\n\n===POSTS_END===\n\n');
}

/**
 * Generate a unique ID for answers
 */
export function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

/**
 * Debounce function for input handling
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
}

/**
 * Handle API errors and return user-friendly messages
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function handleApiError(error: any): AppError {
  if (error?.response?.status === 404) {
    return {
      message: ERROR_MESSAGES.SUBREDDIT_NOT_FOUND,
      type: 'reddit_api',
      details: error,
    };
  }

  if (error?.response?.status === 429) {
    return {
      message: ERROR_MESSAGES.RATE_LIMIT,
      type: 'network',
      details: error,
    };
  }

  if (error?.code === 'ENOTFOUND' || error?.code === 'ECONNREFUSED') {
    return {
      message: ERROR_MESSAGES.NETWORK_ERROR,
      type: 'network',
      details: error,
    };
  }

  if (error?.message?.includes('OpenAI')) {
    return {
      message: ERROR_MESSAGES.OPENAI_ERROR,
      type: 'openai_api',
      details: error,
    };
  }

  return {
    message: error?.message || ERROR_MESSAGES.GENERIC_ERROR,
    type: 'unknown',
    details: error,
  };
}

/**
 * Save data to localStorage safely
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function saveToLocalStorage(key: string, data: any): boolean {
  try {
    localStorage.setItem(key, JSON.stringify(data));
    return true;
  } catch (error) {
    console.error('Failed to save to localStorage:', error);
    return false;
  }
}

/**
 * Load data from localStorage safely
 */
export function loadFromLocalStorage<T>(key: string, defaultValue: T): T {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.error('Failed to load from localStorage:', error);
    return defaultValue;
  }
}

/**
 * Format text for sharing
 */
export function formatForSharing(question: string, subreddit: string, answer: string): string {
  const header = `🤖 AI Answer from r/${subreddit}`;
  const questionLine = `❓ Q: ${question}`;
  const answerLine = `💡 A: ${truncateText(answer, 200)}`;
  const footer = `\n\nGenerated by Ask Reddit AI`;
  
  return `${header}\n\n${questionLine}\n\n${answerLine}${footer}`;
}

/**
 * Create a shareable URL for Twitter
 */
export function createTwitterUrl(text: string): string {
  const encodedText = encodeURIComponent(text);
  return `https://twitter.com/intent/tweet?text=${encodedText}`;
}

/**
 * Copy text to clipboard
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
}

/**
 * Rate limiting functions
 */
interface RateLimitData {
  count: number;
  resetTime: number;
}

// Check if we're in development mode (localhost)
function isDevelopment(): boolean {
  if (typeof window === 'undefined') return false;
  return window.location.hostname === 'localhost' || 
         window.location.hostname === '127.0.0.1' ||
         window.location.hostname === '0.0.0.0' ||
         process.env.NODE_ENV === 'development';
}

export function checkRateLimit(): { allowed: boolean; remaining: number; resetTime: number } {
  // Skip rate limiting in development
  if (isDevelopment()) {
    return {
      allowed: true,
      remaining: 999, // Show high number for dev
      resetTime: Date.now() + (24 * 60 * 60 * 1000)
    };
  }

  try {
    const data = loadFromLocalStorage<RateLimitData>(CONFIG.STORAGE.RATE_LIMIT_KEY, {
      count: 0,
      resetTime: Date.now() + (CONFIG.RATE_LIMIT.RESET_HOURS * 60 * 60 * 1000)
    });

    const now = Date.now();
    
    // Reset if time has passed
    if (now >= data.resetTime) {
      const newData: RateLimitData = {
        count: 0,
        resetTime: now + (CONFIG.RATE_LIMIT.RESET_HOURS * 60 * 60 * 1000)
      };
      saveToLocalStorage(CONFIG.STORAGE.RATE_LIMIT_KEY, newData);
      return {
        allowed: true,
        remaining: CONFIG.RATE_LIMIT.MAX_REQUESTS,
        resetTime: newData.resetTime
      };
    }

    const remaining = CONFIG.RATE_LIMIT.MAX_REQUESTS - data.count;
    return {
      allowed: remaining > 0,
      remaining: Math.max(0, remaining),
      resetTime: data.resetTime
    };
  } catch (error) {
    console.error('Error checking rate limit:', error);
    return { allowed: true, remaining: CONFIG.RATE_LIMIT.MAX_REQUESTS, resetTime: Date.now() };
  }
}

export function incrementRateLimit(): void {
  // Skip incrementing in development
  if (isDevelopment()) {
    return;
  }

  try {
    const data = loadFromLocalStorage<RateLimitData>(CONFIG.STORAGE.RATE_LIMIT_KEY, {
      count: 0,
      resetTime: Date.now() + (CONFIG.RATE_LIMIT.RESET_HOURS * 60 * 60 * 1000)
    });

    const updatedData: RateLimitData = {
      count: data.count + 1,
      resetTime: data.resetTime
    };

    saveToLocalStorage(CONFIG.STORAGE.RATE_LIMIT_KEY, updatedData);
  } catch (error) {
    console.error('Error incrementing rate limit:', error);
  }
}

export function formatTimeRemaining(resetTime: number): string {
  const now = Date.now();
  const remaining = Math.max(0, resetTime - now);
  const hours = Math.floor(remaining / (1000 * 60 * 60));
  const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`;
  }
  return `${minutes}m`;
} 


================================================
FILE: src/types/index.ts
================================================
// Reddit API types
export interface RedditPost {
  id: string;
  title: string;
  selftext: string;
  author: string;
  score: number;
  num_comments: number;
  created_utc: number;
  url: string;
  subreddit: string;
  permalink: string;
  upvote_ratio: number;
}

export interface RedditComment {
  id: string;
  body: string;
  author: string;
  score: number;
  created_utc: number;
  replies?: RedditComment[];
  depth: number;
}

export interface SubredditData {
  posts: RedditPost[];
  comments: RedditComment[];
  subreddit: string;
  fetchedAt: number;
}

// AI Response types
export interface AIResponse {
  answer: string;
  sources: {
    title: string;
    url: string;
    type: 'post' | 'comment';
  }[];
  confidence: number;
  model: string;
  tokens_used?: number;
}

// API Request/Response types
export interface AskQuestionRequest {
  subreddit: string;
  question: string;
  model?: 'gpt-4o-mini' | 'gpt-3.5-turbo';
}

export interface AskQuestionResponse {
  success: boolean;
  data?: AIResponse;
  error?: string;
}

export interface RedditDataRequest {
  subreddit: string;
  timeframe?: '24h' | '48h' | 'week';
  limit?: number;
}

export interface RedditDataResponse {
  success: boolean;
  data?: SubredditData;
  error?: string;
}

// UI Component types
export interface PopularSubreddit {
  name: string;
  description: string;
  subscribers: string;
  icon?: string;
}

export interface TrendingQuestion {
  id: string;
  question: string;
  subreddit: string;
  popularity: number;
  tags: string[];
}

export interface ShareableAnswer {
  question: string;
  subreddit: string;
  answer: string;
  timestamp: number;
  id: string;
}

// App State types
export interface AppState {
  selectedSubreddit: string;
  customSubreddit: string;
  question: string;
  isLoading: boolean;
  currentAnswer: AIResponse | null;
  savedAnswers: ShareableAnswer[];
  selectedModel: 'gpt-4o-mini' | 'gpt-3.5-turbo';
}

// Error types
export interface AppError {
  message: string;
  type: 'reddit_api' | 'openai_api' | 'network' | 'validation' | 'unknown';
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  details?: any;
} 

